{"id":"6e9a77de4b271e9a776b16ff328816f9","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"contracts/Surpay.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n// import AutomationCompatibleInterface\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\n\ncontract Surpay{\n    // create storage for surveys and user data\n    struct Company{\n        string id;\n        address companyAddress;\n        Survey[] surveys;\n    }\n    /**\n     * @dev Survey will hold the survey ID as well as a mapping for each user address and response data for the survey.\n     */\n    struct Survey{\n        string id;\n        uint256 payoutAmount;\n        string surveyResponseData;\n        address payable[] surveyTakers;\n    }\n    \n    /* state variables  */\n    Company[] public companies;\n\n    /* constructor */\n\n    /* events */\n\n    /* functions */\n\n    // function createCompany(){}\n    // function submitUserSurveyData(){}\n    // function createSurvey(){}\n\n\n}"},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[18]},"id":19,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"AutomationCompatibleInterface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":18,"linearizedBaseContracts":[18],"name":"AutomationCompatibleInterface","nameLocation":"67:29:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"101:985:0","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":11,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:0","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:0","nodeType":"VariableDeclaration","scope":11,"src":"1110:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:0"},"returnParameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:0","nodeType":"VariableDeclaration","scope":11,"src":"1154:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":9,"mutability":"mutable","name":"performData","nameLocation":"1186:11:0","nodeType":"VariableDeclaration","scope":11,"src":"1173:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":8,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:0"},"scope":18,"src":"1089:110:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"1203:1003:0","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":17,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:0","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"mutability":"mutable","name":"performData","nameLocation":"2247:11:0","nodeType":"VariableDeclaration","scope":17,"src":"2232:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":13,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"2268:0:0"},"scope":18,"src":"2209:60:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":19,"src":"57:2214:0","usedErrors":[]}],"src":"32:2240:0"},"id":0},"contracts/Surpay.sol":{"ast":{"absolutePath":"contracts/Surpay.sol","exportedSymbols":{"AutomationCompatibleInterface":[18],"Surpay":[45]},"id":46,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":20,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"33:23:1"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","id":21,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":46,"sourceUnit":19,"src":"98:84:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Surpay","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":45,"linearizedBaseContracts":[45],"name":"Surpay","nameLocation":"193:6:1","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Surpay.Company","id":30,"members":[{"constant":false,"id":23,"mutability":"mutable","name":"id","nameLocation":"284:2:1","nodeType":"VariableDeclaration","scope":30,"src":"277:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":22,"name":"string","nodeType":"ElementaryTypeName","src":"277:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"companyAddress","nameLocation":"304:14:1","nodeType":"VariableDeclaration","scope":30,"src":"296:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"296:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":29,"mutability":"mutable","name":"surveys","nameLocation":"337:7:1","nodeType":"VariableDeclaration","scope":30,"src":"328:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Survey_$40_storage_$dyn_storage_ptr","typeString":"struct Surpay.Survey[]"},"typeName":{"baseType":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"Survey","nameLocations":["328:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"328:6:1"},"referencedDeclaration":40,"src":"328:6:1","typeDescriptions":{"typeIdentifier":"t_struct$_Survey_$40_storage_ptr","typeString":"struct Surpay.Survey"}},"id":28,"nodeType":"ArrayTypeName","src":"328:8:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Survey_$40_storage_$dyn_storage_ptr","typeString":"struct Surpay.Survey[]"}},"visibility":"internal"}],"name":"Company","nameLocation":"260:7:1","nodeType":"StructDefinition","scope":45,"src":"253:98:1","visibility":"public"},{"canonicalName":"Surpay.Survey","id":40,"members":[{"constant":false,"id":32,"mutability":"mutable","name":"id","nameLocation":"522:2:1","nodeType":"VariableDeclaration","scope":40,"src":"515:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":31,"name":"string","nodeType":"ElementaryTypeName","src":"515:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":34,"mutability":"mutable","name":"payoutAmount","nameLocation":"542:12:1","nodeType":"VariableDeclaration","scope":40,"src":"534:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"534:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":36,"mutability":"mutable","name":"surveyResponseData","nameLocation":"571:18:1","nodeType":"VariableDeclaration","scope":40,"src":"564:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":35,"name":"string","nodeType":"ElementaryTypeName","src":"564:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"surveyTakers","nameLocation":"617:12:1","nodeType":"VariableDeclaration","scope":40,"src":"599:30:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":37,"name":"address","nodeType":"ElementaryTypeName","src":"599:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":38,"nodeType":"ArrayTypeName","src":"599:17:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"}],"name":"Survey","nameLocation":"499:6:1","nodeType":"StructDefinition","scope":45,"src":"492:144:1","visibility":"public"},{"constant":false,"functionSelector":"2813d19d","id":44,"mutability":"mutable","name":"companies","nameLocation":"690:9:1","nodeType":"VariableDeclaration","scope":45,"src":"673:26:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Company_$30_storage_$dyn_storage","typeString":"struct Surpay.Company[]"},"typeName":{"baseType":{"id":42,"nodeType":"UserDefinedTypeName","pathNode":{"id":41,"name":"Company","nameLocations":["673:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":30,"src":"673:7:1"},"referencedDeclaration":30,"src":"673:7:1","typeDescriptions":{"typeIdentifier":"t_struct$_Company_$30_storage_ptr","typeString":"struct Surpay.Company"}},"id":43,"nodeType":"ArrayTypeName","src":"673:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Company_$30_storage_$dyn_storage_ptr","typeString":"struct Surpay.Company[]"}},"visibility":"public"}],"scope":46,"src":"184:691:1","usedErrors":[]}],"src":"33:842:1"},"id":1}},"contracts":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"contracts/Surpay.sol":{"Surpay":{"abi":[{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"companies","outputs":[{"internalType":"string","name":"id","type":"string"},{"internalType":"address","name":"companyAddress","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061033c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632813d19d14610030575b600080fd5b61004a60048036038101906100459190610178565b610061565b604051610058929190610276565b60405180910390f35b6000818154811061007157600080fd5b9060005260206000209060030201600091509050806000018054610094906102d5565b80601f01602080910402602001604051908101604052809291908181526020018280546100c0906102d5565b801561010d5780601f106100e25761010080835404028352916020019161010d565b820191906000526020600020905b8154815290600101906020018083116100f057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600080fd5b6000819050919050565b61015581610142565b811461016057600080fd5b50565b6000813590506101728161014c565b92915050565b60006020828403121561018e5761018d61013d565b5b600061019c84828501610163565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101df5780820151818401526020810190506101c4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610207826101a5565b61021181856101b0565b93506102218185602086016101c1565b61022a816101eb565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061026082610235565b9050919050565b61027081610255565b82525050565b6000604082019050818103600083015261029081856101fc565b905061029f6020830184610267565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102ed57607f821691505b602082108103610300576102ff6102a6565b5b5091905056fea264697066735822122004389cbee7e1ec03185488e66c9a66efc4e8d7d8a62a50a91666c8db5911c8ec64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2813D19D EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x178 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58 SWAP3 SWAP2 SWAP1 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x94 SWAP1 PUSH2 0x2D5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC0 SWAP1 PUSH2 0x2D5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x155 DUP2 PUSH2 0x142 JUMP JUMPDEST DUP2 EQ PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x172 DUP2 PUSH2 0x14C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E JUMPI PUSH2 0x18D PUSH2 0x13D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19C DUP5 DUP3 DUP6 ADD PUSH2 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x207 DUP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x211 DUP2 DUP6 PUSH2 0x1B0 JUMP JUMPDEST SWAP4 POP PUSH2 0x221 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH2 0x22A DUP2 PUSH2 0x1EB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 DUP3 PUSH2 0x235 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x270 DUP2 PUSH2 0x255 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x290 DUP2 DUP6 PUSH2 0x1FC JUMP JUMPDEST SWAP1 POP PUSH2 0x29F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x267 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2ED JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x300 JUMPI PUSH2 0x2FF PUSH2 0x2A6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV CODESIZE SWAP13 0xBE 0xE7 0xE1 0xEC SUB XOR SLOAD DUP9 0xE6 PUSH13 0x9A66EFC4E8D7D8A62A50A91666 0xC8 0xDB MSIZE GT 0xC8 0xEC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"184:691:1:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@companies_44":{"entryPoint":97,"id":44,"parameterSlots":0,"returnSlots":0},"abi_decode_t_uint256":{"entryPoint":355,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":376,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":615,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":508,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed":{"entryPoint":630,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":421,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":432,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":597,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":565,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":322,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":449,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":725,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x22":{"entryPoint":678,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":317,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":491,"id":null,"parameterSlots":1,"returnSlots":1},"validator_revert_t_uint256":{"entryPoint":332,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3344:2","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:2","statements":[{"nodeType":"YulAssignment","src":"57:19:2","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:2","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:2"},"nodeType":"YulFunctionCall","src":"67:9:2"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:2"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:2","type":""}],"src":"7:75:2"},{"body":{"nodeType":"YulBlock","src":"177:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:2"},"nodeType":"YulFunctionCall","src":"187:12:2"},"nodeType":"YulExpressionStatement","src":"187:12:2"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:2"},{"body":{"nodeType":"YulBlock","src":"300:28:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:2"},"nodeType":"YulFunctionCall","src":"310:12:2"},"nodeType":"YulExpressionStatement","src":"310:12:2"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:2"},{"body":{"nodeType":"YulBlock","src":"379:32:2","statements":[{"nodeType":"YulAssignment","src":"389:16:2","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:2"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:2","type":""}],"src":"334:77:2"},{"body":{"nodeType":"YulBlock","src":"460:79:2","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:2","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:2"},"nodeType":"YulFunctionCall","src":"519:12:2"},"nodeType":"YulExpressionStatement","src":"519:12:2"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:2"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:2"},"nodeType":"YulFunctionCall","src":"490:24:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:2"},"nodeType":"YulFunctionCall","src":"480:35:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:2"},"nodeType":"YulFunctionCall","src":"473:43:2"},"nodeType":"YulIf","src":"470:63:2"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:2","type":""}],"src":"417:122:2"},{"body":{"nodeType":"YulBlock","src":"597:87:2","statements":[{"nodeType":"YulAssignment","src":"607:29:2","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:2"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:2"},"nodeType":"YulFunctionCall","src":"616:20:2"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:2"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:2"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:2"},"nodeType":"YulFunctionCall","src":"645:33:2"},"nodeType":"YulExpressionStatement","src":"645:33:2"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:2","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:2","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:2","type":""}],"src":"545:139:2"},{"body":{"nodeType":"YulBlock","src":"756:263:2","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:2"},"nodeType":"YulFunctionCall","src":"804:79:2"},"nodeType":"YulExpressionStatement","src":"804:79:2"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:2"},"nodeType":"YulFunctionCall","src":"773:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:2","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:2"},"nodeType":"YulFunctionCall","src":"769:32:2"},"nodeType":"YulIf","src":"766:119:2"},{"nodeType":"YulBlock","src":"895:117:2","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:2","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:2","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:2","type":""}]},{"nodeType":"YulAssignment","src":"939:63:2","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:2"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:2"},"nodeType":"YulFunctionCall","src":"970:22:2"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:2"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"949:20:2"},"nodeType":"YulFunctionCall","src":"949:53:2"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:2"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:2","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:2","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:2","type":""}],"src":"690:329:2"},{"body":{"nodeType":"YulBlock","src":"1084:40:2","statements":[{"nodeType":"YulAssignment","src":"1095:22:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1111:5:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1105:5:2"},"nodeType":"YulFunctionCall","src":"1105:12:2"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1095:6:2"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1067:5:2","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1077:6:2","type":""}],"src":"1025:99:2"},{"body":{"nodeType":"YulBlock","src":"1226:73:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1243:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"1248:6:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1236:6:2"},"nodeType":"YulFunctionCall","src":"1236:19:2"},"nodeType":"YulExpressionStatement","src":"1236:19:2"},{"nodeType":"YulAssignment","src":"1264:29:2","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1283:3:2"},{"kind":"number","nodeType":"YulLiteral","src":"1288:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1279:3:2"},"nodeType":"YulFunctionCall","src":"1279:14:2"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1264:11:2"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1198:3:2","type":""},{"name":"length","nodeType":"YulTypedName","src":"1203:6:2","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1214:11:2","type":""}],"src":"1130:169:2"},{"body":{"nodeType":"YulBlock","src":"1367:184:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1377:10:2","value":{"kind":"number","nodeType":"YulLiteral","src":"1386:1:2","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1381:1:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"1446:63:2","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1471:3:2"},{"name":"i","nodeType":"YulIdentifier","src":"1476:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1467:3:2"},"nodeType":"YulFunctionCall","src":"1467:11:2"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1490:3:2"},{"name":"i","nodeType":"YulIdentifier","src":"1495:1:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1486:3:2"},"nodeType":"YulFunctionCall","src":"1486:11:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1480:5:2"},"nodeType":"YulFunctionCall","src":"1480:18:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1460:6:2"},"nodeType":"YulFunctionCall","src":"1460:39:2"},"nodeType":"YulExpressionStatement","src":"1460:39:2"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1407:1:2"},{"name":"length","nodeType":"YulIdentifier","src":"1410:6:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1404:2:2"},"nodeType":"YulFunctionCall","src":"1404:13:2"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1418:19:2","statements":[{"nodeType":"YulAssignment","src":"1420:15:2","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1429:1:2"},{"kind":"number","nodeType":"YulLiteral","src":"1432:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1425:3:2"},"nodeType":"YulFunctionCall","src":"1425:10:2"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1420:1:2"}]}]},"pre":{"nodeType":"YulBlock","src":"1400:3:2","statements":[]},"src":"1396:113:2"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1529:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"1534:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1525:3:2"},"nodeType":"YulFunctionCall","src":"1525:16:2"},{"kind":"number","nodeType":"YulLiteral","src":"1543:1:2","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1518:6:2"},"nodeType":"YulFunctionCall","src":"1518:27:2"},"nodeType":"YulExpressionStatement","src":"1518:27:2"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1349:3:2","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1354:3:2","type":""},{"name":"length","nodeType":"YulTypedName","src":"1359:6:2","type":""}],"src":"1305:246:2"},{"body":{"nodeType":"YulBlock","src":"1605:54:2","statements":[{"nodeType":"YulAssignment","src":"1615:38:2","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1633:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"1640:2:2","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1629:3:2"},"nodeType":"YulFunctionCall","src":"1629:14:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1649:2:2","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1645:3:2"},"nodeType":"YulFunctionCall","src":"1645:7:2"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1625:3:2"},"nodeType":"YulFunctionCall","src":"1625:28:2"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1615:6:2"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1588:5:2","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1598:6:2","type":""}],"src":"1557:102:2"},{"body":{"nodeType":"YulBlock","src":"1757:285:2","statements":[{"nodeType":"YulVariableDeclaration","src":"1767:53:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1814:5:2"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1781:32:2"},"nodeType":"YulFunctionCall","src":"1781:39:2"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1771:6:2","type":""}]},{"nodeType":"YulAssignment","src":"1829:78:2","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1895:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"1900:6:2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1836:58:2"},"nodeType":"YulFunctionCall","src":"1836:71:2"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1829:3:2"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1955:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:2","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1951:3:2"},"nodeType":"YulFunctionCall","src":"1951:16:2"},{"name":"pos","nodeType":"YulIdentifier","src":"1969:3:2"},{"name":"length","nodeType":"YulIdentifier","src":"1974:6:2"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"1916:34:2"},"nodeType":"YulFunctionCall","src":"1916:65:2"},"nodeType":"YulExpressionStatement","src":"1916:65:2"},{"nodeType":"YulAssignment","src":"1990:46:2","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2001:3:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2028:6:2"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2006:21:2"},"nodeType":"YulFunctionCall","src":"2006:29:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1997:3:2"},"nodeType":"YulFunctionCall","src":"1997:39:2"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1990:3:2"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1738:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1745:3:2","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1753:3:2","type":""}],"src":"1665:377:2"},{"body":{"nodeType":"YulBlock","src":"2093:81:2","statements":[{"nodeType":"YulAssignment","src":"2103:65:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2118:5:2"},{"kind":"number","nodeType":"YulLiteral","src":"2125:42:2","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2114:3:2"},"nodeType":"YulFunctionCall","src":"2114:54:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2103:7:2"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2075:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2085:7:2","type":""}],"src":"2048:126:2"},{"body":{"nodeType":"YulBlock","src":"2225:51:2","statements":[{"nodeType":"YulAssignment","src":"2235:35:2","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2264:5:2"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2246:17:2"},"nodeType":"YulFunctionCall","src":"2246:24:2"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2235:7:2"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2207:5:2","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2217:7:2","type":""}],"src":"2180:96:2"},{"body":{"nodeType":"YulBlock","src":"2347:53:2","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2364:3:2"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2387:5:2"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2369:17:2"},"nodeType":"YulFunctionCall","src":"2369:24:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2357:6:2"},"nodeType":"YulFunctionCall","src":"2357:37:2"},"nodeType":"YulExpressionStatement","src":"2357:37:2"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2335:5:2","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2342:3:2","type":""}],"src":"2282:118:2"},{"body":{"nodeType":"YulBlock","src":"2552:277:2","statements":[{"nodeType":"YulAssignment","src":"2562:26:2","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2574:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2585:2:2","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2570:3:2"},"nodeType":"YulFunctionCall","src":"2570:18:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2562:4:2"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2609:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2620:1:2","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2605:3:2"},"nodeType":"YulFunctionCall","src":"2605:17:2"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2628:4:2"},{"name":"headStart","nodeType":"YulIdentifier","src":"2634:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2624:3:2"},"nodeType":"YulFunctionCall","src":"2624:20:2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2598:6:2"},"nodeType":"YulFunctionCall","src":"2598:47:2"},"nodeType":"YulExpressionStatement","src":"2598:47:2"},{"nodeType":"YulAssignment","src":"2654:86:2","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2726:6:2"},{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:2"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2662:63:2"},"nodeType":"YulFunctionCall","src":"2662:78:2"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2654:4:2"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2794:6:2"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2807:9:2"},{"kind":"number","nodeType":"YulLiteral","src":"2818:2:2","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2803:3:2"},"nodeType":"YulFunctionCall","src":"2803:18:2"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2750:43:2"},"nodeType":"YulFunctionCall","src":"2750:72:2"},"nodeType":"YulExpressionStatement","src":"2750:72:2"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2516:9:2","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2528:6:2","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2536:6:2","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2547:4:2","type":""}],"src":"2406:423:2"},{"body":{"nodeType":"YulBlock","src":"2863:152:2","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2880:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2883:77:2","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2873:6:2"},"nodeType":"YulFunctionCall","src":"2873:88:2"},"nodeType":"YulExpressionStatement","src":"2873:88:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2977:1:2","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2980:4:2","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2970:6:2"},"nodeType":"YulFunctionCall","src":"2970:15:2"},"nodeType":"YulExpressionStatement","src":"2970:15:2"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3001:1:2","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3004:4:2","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2994:6:2"},"nodeType":"YulFunctionCall","src":"2994:15:2"},"nodeType":"YulExpressionStatement","src":"2994:15:2"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"2835:180:2"},{"body":{"nodeType":"YulBlock","src":"3072:269:2","statements":[{"nodeType":"YulAssignment","src":"3082:22:2","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3096:4:2"},{"kind":"number","nodeType":"YulLiteral","src":"3102:1:2","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3092:3:2"},"nodeType":"YulFunctionCall","src":"3092:12:2"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3082:6:2"}]},{"nodeType":"YulVariableDeclaration","src":"3113:38:2","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3143:4:2"},{"kind":"number","nodeType":"YulLiteral","src":"3149:1:2","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3139:3:2"},"nodeType":"YulFunctionCall","src":"3139:12:2"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3117:18:2","type":""}]},{"body":{"nodeType":"YulBlock","src":"3190:51:2","statements":[{"nodeType":"YulAssignment","src":"3204:27:2","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3218:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3226:4:2","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3214:3:2"},"nodeType":"YulFunctionCall","src":"3214:17:2"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3204:6:2"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3170:18:2"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3163:6:2"},"nodeType":"YulFunctionCall","src":"3163:26:2"},"nodeType":"YulIf","src":"3160:81:2"},{"body":{"nodeType":"YulBlock","src":"3293:42:2","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"3307:16:2"},"nodeType":"YulFunctionCall","src":"3307:18:2"},"nodeType":"YulExpressionStatement","src":"3307:18:2"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3257:18:2"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3280:6:2"},{"kind":"number","nodeType":"YulLiteral","src":"3288:2:2","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3277:2:2"},"nodeType":"YulFunctionCall","src":"3277:14:2"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3254:2:2"},"nodeType":"YulFunctionCall","src":"3254:38:2"},"nodeType":"YulIf","src":"3251:84:2"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3056:4:2","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3065:6:2","type":""}],"src":"3021:320:2"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr_t_address__to_t_string_memory_ptr_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":2,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b506004361061002b5760003560e01c80632813d19d14610030575b600080fd5b61004a60048036038101906100459190610178565b610061565b604051610058929190610276565b60405180910390f35b6000818154811061007157600080fd5b9060005260206000209060030201600091509050806000018054610094906102d5565b80601f01602080910402602001604051908101604052809291908181526020018280546100c0906102d5565b801561010d5780601f106100e25761010080835404028352916020019161010d565b820191906000526020600020905b8154815290600101906020018083116100f057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600080fd5b6000819050919050565b61015581610142565b811461016057600080fd5b50565b6000813590506101728161014c565b92915050565b60006020828403121561018e5761018d61013d565b5b600061019c84828501610163565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101df5780820151818401526020810190506101c4565b60008484015250505050565b6000601f19601f8301169050919050565b6000610207826101a5565b61021181856101b0565b93506102218185602086016101c1565b61022a816101eb565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061026082610235565b9050919050565b61027081610255565b82525050565b6000604082019050818103600083015261029081856101fc565b905061029f6020830184610267565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102ed57607f821691505b602082108103610300576102ff6102a6565b5b5091905056fea264697066735822122004389cbee7e1ec03185488e66c9a66efc4e8d7d8a62a50a91666c8db5911c8ec64736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2813D19D EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x178 JUMP JUMPDEST PUSH2 0x61 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x58 SWAP3 SWAP2 SWAP1 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x94 SWAP1 PUSH2 0x2D5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC0 SWAP1 PUSH2 0x2D5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xE2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xF0 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x155 DUP2 PUSH2 0x142 JUMP JUMPDEST DUP2 EQ PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x172 DUP2 PUSH2 0x14C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E JUMPI PUSH2 0x18D PUSH2 0x13D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19C DUP5 DUP3 DUP6 ADD PUSH2 0x163 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1C4 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x207 DUP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x211 DUP2 DUP6 PUSH2 0x1B0 JUMP JUMPDEST SWAP4 POP PUSH2 0x221 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1C1 JUMP JUMPDEST PUSH2 0x22A DUP2 PUSH2 0x1EB JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x260 DUP3 PUSH2 0x235 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x270 DUP2 PUSH2 0x255 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x290 DUP2 DUP6 PUSH2 0x1FC JUMP JUMPDEST SWAP1 POP PUSH2 0x29F PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x267 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2ED JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x300 JUMPI PUSH2 0x2FF PUSH2 0x2A6 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DIV CODESIZE SWAP13 0xBE 0xE7 0xE1 0xEC SUB XOR SLOAD DUP9 0xE6 PUSH13 0x9A66EFC4E8D7D8A62A50A91666 0xC8 0xDB MSIZE GT 0xC8 0xEC PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"184:691:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;673:26;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;88:117:2:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:99::-;1077:6;1111:5;1105:12;1095:22;;1025:99;;;:::o;1130:169::-;1214:11;1248:6;1243:3;1236:19;1288:4;1283:3;1279:14;1264:29;;1130:169;;;;:::o;1305:246::-;1386:1;1396:113;1410:6;1407:1;1404:13;1396:113;;;1495:1;1490:3;1486:11;1480:18;1476:1;1471:3;1467:11;1460:39;1432:2;1429:1;1425:10;1420:15;;1396:113;;;1543:1;1534:6;1529:3;1525:16;1518:27;1367:184;1305:246;;;:::o;1557:102::-;1598:6;1649:2;1645:7;1640:2;1633:5;1629:14;1625:28;1615:38;;1557:102;;;:::o;1665:377::-;1753:3;1781:39;1814:5;1781:39;:::i;:::-;1836:71;1900:6;1895:3;1836:71;:::i;:::-;1829:78;;1916:65;1974:6;1969:3;1962:4;1955:5;1951:16;1916:65;:::i;:::-;2006:29;2028:6;2006:29;:::i;:::-;2001:3;1997:39;1990:46;;1757:285;1665:377;;;;:::o;2048:126::-;2085:7;2125:42;2118:5;2114:54;2103:65;;2048:126;;;:::o;2180:96::-;2217:7;2246:24;2264:5;2246:24;:::i;:::-;2235:35;;2180:96;;;:::o;2282:118::-;2369:24;2387:5;2369:24;:::i;:::-;2364:3;2357:37;2282:118;;:::o;2406:423::-;2547:4;2585:2;2574:9;2570:18;2562:26;;2634:9;2628:4;2624:20;2620:1;2609:9;2605:17;2598:47;2662:78;2735:4;2726:6;2662:78;:::i;:::-;2654:86;;2750:72;2818:2;2807:9;2803:18;2794:6;2750:72;:::i;:::-;2406:423;;;;;:::o;2835:180::-;2883:77;2880:1;2873:88;2980:4;2977:1;2970:15;3004:4;3001:1;2994:15;3021:320;3065:6;3102:1;3096:4;3092:12;3082:22;;3149:1;3143:4;3139:12;3170:18;3160:81;;3226:4;3218:6;3214:17;3204:27;;3160:81;3288:2;3280:6;3277:14;3257:18;3254:38;3251:84;;3307:18;;:::i;:::-;3251:84;3072:269;3021:320;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"165600","executionCost":"208","totalCost":"165808"},"external":{"companies(uint256)":"infinite"}},"methodIdentifiers":{"companies(uint256)":"2813d19d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companies\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Surpay.sol\":\"Surpay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/Surpay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n// import AutomationCompatibleInterface\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\ncontract Surpay{\\n    // create storage for surveys and user data\\n    struct Company{\\n        string id;\\n        address companyAddress;\\n        Survey[] surveys;\\n    }\\n    /**\\n     * @dev Survey will hold the survey ID as well as a mapping for each user address and response data for the survey.\\n     */\\n    struct Survey{\\n        string id;\\n        uint256 payoutAmount;\\n        string surveyResponseData;\\n        address payable[] surveyTakers;\\n    }\\n    \\n    /* state variables  */\\n    Company[] public companies;\\n\\n    /* constructor */\\n\\n    /* events */\\n\\n    /* functions */\\n\\n    // function createCompany(){}\\n    // function submitUserSurveyData(){}\\n    // function createSurvey(){}\\n\\n\\n}\",\"keccak256\":\"0x1d1c0502d5422547f0de08604ec569a73336a7b9f1b955cc55712c357ab11a66\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":44,"contract":"contracts/Surpay.sol:Surpay","label":"companies","offset":0,"slot":"0","type":"t_array(t_struct(Company)30_storage)dyn_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_array(t_struct(Company)30_storage)dyn_storage":{"base":"t_struct(Company)30_storage","encoding":"dynamic_array","label":"struct Surpay.Company[]","numberOfBytes":"32"},"t_array(t_struct(Survey)40_storage)dyn_storage":{"base":"t_struct(Survey)40_storage","encoding":"dynamic_array","label":"struct Surpay.Survey[]","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Company)30_storage":{"encoding":"inplace","label":"struct Surpay.Company","members":[{"astId":23,"contract":"contracts/Surpay.sol:Surpay","label":"id","offset":0,"slot":"0","type":"t_string_storage"},{"astId":25,"contract":"contracts/Surpay.sol:Surpay","label":"companyAddress","offset":0,"slot":"1","type":"t_address"},{"astId":29,"contract":"contracts/Surpay.sol:Surpay","label":"surveys","offset":0,"slot":"2","type":"t_array(t_struct(Survey)40_storage)dyn_storage"}],"numberOfBytes":"96"},"t_struct(Survey)40_storage":{"encoding":"inplace","label":"struct Surpay.Survey","members":[{"astId":32,"contract":"contracts/Surpay.sol:Surpay","label":"id","offset":0,"slot":"0","type":"t_string_storage"},{"astId":34,"contract":"contracts/Surpay.sol:Surpay","label":"payoutAmount","offset":0,"slot":"1","type":"t_uint256"},{"astId":36,"contract":"contracts/Surpay.sol:Surpay","label":"surveyResponseData","offset":0,"slot":"2","type":"t_string_storage"},{"astId":39,"contract":"contracts/Surpay.sol:Surpay","label":"surveyTakers","offset":0,"slot":"3","type":"t_array(t_address_payable)dyn_storage"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}