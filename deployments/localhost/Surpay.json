{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_surveyCreationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Surpay__MaximumRespondantsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__SurveyAlreadyConcluded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__SurveyNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Surpay__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "SurveyCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "SurveyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "SurveyTakersPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "surveyTaker",
          "type": "address"
        }
      ],
      "name": "UserAddedToSurvey",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_surveyId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_companyId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalPayoutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numOfParticipantsDesired",
          "type": "uint256"
        }
      ],
      "name": "createSurvey",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "distributeFundsFromCompletedSurvey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "getCompanyId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeHolderAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        }
      ],
      "name": "getPayoutPerPersonBySurveyId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSurveyCreationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_surveyId",
          "type": "string"
        }
      ],
      "name": "getSurveyPayoutAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_surveyId",
          "type": "string"
        }
      ],
      "name": "getSurveyState",
      "outputs": [
        {
          "internalType": "enum Surpay.SurveyState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "surveyId",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        }
      ],
      "name": "getSurveyTaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeCompletedSurveys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_surveyId",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "sendUserSurveyData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromFeeHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeb6bafc37ecc9ac81e5d2394a36ee45645003f1890d504007ccb78234c649627",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2170000",
    "logsBloom": "0x
    "blockHash": "0x8bee8c9905872a5fb9200f6f701b2c324f976fceeb027756ca3cae56c81f4cf8",
    "transactionHash": "0xeb6bafc37ecc9ac81e5d2394a36ee45645003f1890d504007ccb78234c649627",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2170000",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "da4c71375e0efd678c386df6af1d3534",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_surveyCreationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Surpay__MaximumRespondantsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__SurveyAlreadyConcluded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__SurveyNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Surpay__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"SurveyCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"SurveyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"SurveyTakersPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"surveyTaker\",\"type\":\"address\"}],\"name\":\"UserAddedToSurvey\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_surveyId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_companyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalPayoutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numOfParticipantsDesired\",\"type\":\"uint256\"}],\"name\":\"createSurvey\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"distributeFundsFromCompletedSurvey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"getCompanyId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeHolderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"}],\"name\":\"getPayoutPerPersonBySurveyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSurveyCreationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_surveyId\",\"type\":\"string\"}],\"name\":\"getSurveyPayoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_surveyId\",\"type\":\"string\"}],\"name\":\"getSurveyState\",\"outputs\":[{\"internalType\":\"enum Surpay.SurveyState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"surveyId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"}],\"name\":\"getSurveyTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCompletedSurveys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_surveyId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"sendUserSurveyData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromFeeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Returns true only if there are any complete surveys.\"},\"createSurvey(string,string,uint256,uint256)\":{\"details\":\"A survey can be created by anyone, but it must be calledwith both the total payout amount and the survey creationfee. The current fee is 0.01 ETH. \"},\"distributeFundsFromCompletedSurvey(uint256)\":{\"details\":\"The index of s_completeSurveys is passed in from performUpkeep().\"},\"performUpkeep(bytes)\":{\"details\":\"chainlink automation. perform upkeep fires if checkUpkeep returnstrue.\"},\"sendUserSurveyData(string,address)\":{\"details\":\"The SurveyCompleted event is the event listener\"},\"withdrawFromFeeHolder(uint256)\":{\"details\":\"allows owner to withdraw no more than the survey creation fees.\"}},\"stateVariables\":{\"i_owner\":{\"details\":\"s_surveys holds all survey data, with the surveyId as the key. completed surveys stors the surveyIds for all completed surveysThe surveyCreationFee is required for all new surveys.The surveyCreationFee is for tx fees and revenue for the service\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"removeCompletedSurveys()\":{\"notice\":\"Allows the owner to perform a clean up of any completed surveys\"},\"sendUserSurveyData(string,address)\":{\"notice\":\"Function can only be called by the contract owner.This was neccissary to ensure that the user data wasa valid response to the survey. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Surpay.sol\":\"Surpay\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/Surpay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Surpay\\n * @author Keegan Anglim and Alan Abed\\n * @notice This contract is meant to be a demo and should not be used\\n * in production\\n * @notice The purpose of this contract is to facilitate an exchange\\n * of survey data for funds.\\n */\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Surpay__NotEnoughFunds();\\nerror Surpay__MissingRequiredFields();\\nerror Surpay__TransferFailed();\\nerror Surpay__SurveyNotFound();\\nerror Surpay__MaximumRespondantsReached();\\nerror Surpay__NotOwner();\\nerror Surpay__UpkeepNotNeeded();\\nerror Surpay__SurveyAlreadyConcluded();\\n\\ncontract Surpay is AutomationCompatibleInterface{\\n\\n    /* Type Declarations  */\\n\\n    /**\\n     * @dev Survey structs will hold the survey ID as well as a mapping for each user address, as well as payout information.\\n     */\\n    struct Survey{\\n        \\n        string companyId;\\n        address companyAddress;\\n        uint256 totalPayoutAmount;\\n        uint256 numOfParticipantsDesired;\\n        uint256 numOfParticipantsFulfilled;\\n        address payable[] surveyTakers;\\n        uint256 startTimeStamp;\\n        SurveyState surveyState;\\n    }\\n    /**\\n     * @dev The survey state was needed in an ealier version of the contract\\n     * @dev We are leaving it in, because a get state function is used in \\n     * @dev one of our unit tests.\\n     */\\n    enum SurveyState{\\n        OPEN,\\n        COMPLETED,\\n        PAID\\n    }\\n    \\n    /* state variables  */\\n    /**\\n     * @dev s_surveys holds all survey data, with the surveyId as the key. \\n     * @dev completed surveys stors the surveyIds for all completed surveys\\n     * @dev The surveyCreationFee is required for all new surveys.\\n     * @dev The surveyCreationFee is for tx fees and revenue for the service\\n     */\\n    address i_owner;\\n    mapping (string=>Survey) s_surveys;\\n    string[] private s_completedSurveys;\\n    uint256 private immutable i_surveyCreationFee;\\n    uint256 private s_feeHolder;\\n\\n    /* survey variables  */\\n    uint256 private immutable i_interval;\\n\\n    /* modifiers */\\n    modifier onlyOwner(){\\n        if (msg.sender != i_owner) revert Surpay__NotOwner();\\n        _;\\n    }\\n\\n    /* constructor */\\n    constructor(uint256 _surveyCreationFee, uint256 _interval){\\n        i_owner = msg.sender;\\n        i_surveyCreationFee = _surveyCreationFee;\\n        i_interval = _interval;\\n    }\\n\\n    /* events */\\n    event SurveyCreated(string indexed surveyId);\\n    event UserAddedToSurvey(address indexed surveyTaker);\\n    event SurveyCompleted(string indexed surveyId);\\n    event SurveyTakersPaid(string indexed surveyId);\\n    event FundsWithdrawn(uint256 indexed amount);\\n    \\n\\n    /* functions */\\n    /**\\n     * @dev chainlink automation. perform upkeep fires if checkUpkeep returns\\n     * @dev true.\\n     */\\n    function performUpkeep(bytes calldata /* performData */) external override{\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        // logic for what should happen if upkeepNeeded is true\\n        if (upkeepNeeded) {\\n            string[] memory completedSurveys = s_completedSurveys;\\n            for (uint256 i=0;i<completedSurveys.length;i++){\\n            distributeFundsFromCompletedSurvey(i);\\n            emit SurveyTakersPaid(completedSurveys[i]);\\n        } \\n        } else {\\n            revert Surpay__UpkeepNotNeeded();\\n        }\\n    }\\n    /**\\n     * @dev Returns true only if there are any complete surveys.\\n     */\\n    function checkUpkeep(bytes memory /* checkData */) public returns (bool upkeepNeeded, bytes memory /* performData */){\\n        // conditions for automation to be performed\\n        if (s_completedSurveys.length > 0){\\n            upkeepNeeded = true;\\n        } else {\\n            upkeepNeeded = false;\\n        }\\n    }\\n    /**\\n     * @dev A survey can be created by anyone, but it must be called\\n     * @dev with both the total payout amount and the survey creation\\n     * @dev fee. The current fee is 0.01 ETH. \\n     */\\n    function createSurvey(\\n        string memory _surveyId,\\n        string memory _companyId, \\n        uint256 _totalPayoutAmount, \\n        uint256 _numOfParticipantsDesired\\n        ) public payable {\\n            if (msg.value < i_surveyCreationFee + _totalPayoutAmount){\\n                revert Surpay__NotEnoughFunds();\\n            }\\n\\n            s_feeHolder += i_surveyCreationFee;\\n  \\n            Survey memory newSurvey;\\n            newSurvey.companyId = _companyId;\\n            newSurvey.companyAddress = msg.sender;\\n            newSurvey.totalPayoutAmount = _totalPayoutAmount;\\n            newSurvey.numOfParticipantsDesired = _numOfParticipantsDesired;\\n            newSurvey.startTimeStamp = block.timestamp;\\n            newSurvey.surveyState = SurveyState.OPEN;\\n            \\n            s_surveys[_surveyId] = newSurvey;\\n            emit SurveyCreated(_surveyId);\\n    }\\n    /**\\n     * @notice Function can only be called by the contract owner.\\n     * @notice This was neccissary to ensure that the user data was\\n     * @notice a valid response to the survey.\\n     * \\n     * @dev The SurveyCompleted event is the event listener\\n     */\\n    function sendUserSurveyData(string memory _surveyId, address userAddress) public onlyOwner {\\n        \\n        if (s_surveys[_surveyId].numOfParticipantsDesired > s_surveys[_surveyId].numOfParticipantsFulfilled) {\\n            // Store the user address and increment participantsFulfilled\\n            s_surveys[_surveyId].surveyTakers.push(payable(userAddress));\\n            s_surveys[_surveyId].numOfParticipantsFulfilled++;\\n            // if number of participants is equal to the number of participants desired, change the survey state to COMPLETED. Add to completedSurveys array. \\n            if (s_surveys[_surveyId].numOfParticipantsDesired == s_surveys[_surveyId].numOfParticipantsFulfilled) {\\n                s_surveys[_surveyId].surveyState = SurveyState.COMPLETED;\\n                s_completedSurveys.push(_surveyId);\\n                // event listener for Chainlink Automation\\n                emit SurveyCompleted(_surveyId);\\n            }\\n\\n            emit UserAddedToSurvey(userAddress);\\n            \\n\\n        } else {\\n            revert Surpay__MaximumRespondantsReached();\\n        }\\n    }\\n    \\n    /**\\n     * @dev The index of s_completeSurveys is passed in from performUpkeep().\\n     */\\n    function distributeFundsFromCompletedSurvey(uint256 index) public {\\n\\n        // copy state variable to local varable for payout iteration\\n        string[] memory completedSurveys = s_completedSurveys;\\n\\n        // revert if the survey has already been paid out.\\n        if (s_surveys[completedSurveys[index]].surveyState == SurveyState.PAID){\\n            revert Surpay__SurveyAlreadyConcluded();\\n        }\\n\\n        // total payout amount is divided between the number of participants\\n        uint256 ethToPay;\\n        \\n        ethToPay = s_surveys[completedSurveys[index]].totalPayoutAmount / s_surveys[completedSurveys[index]].numOfParticipantsFulfilled;        \\n        // loop through all user addresses and in the survey struct, and payout the totalPayoutAmount equally\\n        for(uint256 i=0;i<s_surveys[completedSurveys[index]].surveyTakers.length;i++){\\n            if (ethToPay < address(this).balance){\\n                (bool success, ) = s_surveys[completedSurveys[index]].surveyTakers[i].call{value: ethToPay}(\\\"\\\");\\n                if (!success){\\n                    revert Surpay__TransferFailed();\\n                }\\n            }\\n        }\\n        s_surveys[completedSurveys[index]].surveyState = SurveyState.PAID;\\n        \\n    }\\n    /**\\n     * @dev allows owner to withdraw no more than the survey creation fees.\\n     */\\n    function withdrawFromFeeHolder(uint256 amount) public onlyOwner {\\n        if (amount > s_feeHolder){\\n            revert Surpay__NotEnoughFunds();\\n        } else {\\n            (bool success, ) = i_owner.call{value: amount}(\\\"\\\");\\n            if (success){\\n                s_feeHolder -= amount;\\n                emit FundsWithdrawn(amount);\\n            } else {\\n                revert Surpay__TransferFailed();\\n            }\\n        }\\n    }\\n    /**\\n     * Allows the owner to perform a clean up of any completed surveys\\n     */\\n    function removeCompletedSurveys() public onlyOwner {\\n        string[] memory completedSurveys = s_completedSurveys;\\n        for(uint256 i=0;i<completedSurveys.length;i++){\\n            delete(s_surveys[completedSurveys[i]]);\\n        }\\n    }\\n\\n    /* view/pure functions  */\\n\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getSurveyState(string memory _surveyId) public view returns(SurveyState){\\n        if (s_surveys[_surveyId].numOfParticipantsDesired > 0){\\n            return s_surveys[_surveyId].surveyState;\\n        } else {\\n            revert Surpay__SurveyNotFound();\\n        }\\n        \\n    }\\n\\n    function getFeeHolderAmount() public view returns(uint256){\\n        return s_feeHolder;\\n    }\\n\\n    function getSurveyCreationFee() public view returns(uint256) {\\n        return i_surveyCreationFee;\\n    }\\n\\n    function getInterval() public view returns(uint256) {\\n        return i_interval;\\n    }\\n\\n    function getCompanyId(string memory surveyId) public view returns(string memory){\\n        return s_surveys[surveyId].companyId;\\n    }\\n\\n    function getSurveyPayoutAmount(string memory _surveyId) public view returns(uint256){\\n        if (s_surveys[_surveyId].numOfParticipantsDesired > 0){\\n            return s_surveys[_surveyId].totalPayoutAmount;\\n        } else {\\n            revert Surpay__SurveyNotFound();\\n        }\\n    }\\n\\n    function getSurveyTaker(string memory surveyId, uint256 userIndex) public view returns(address){\\n        // add the address of a survey taker\\n        if (s_surveys[surveyId].numOfParticipantsDesired > 0){\\n            return s_surveys[surveyId].surveyTakers[userIndex];\\n        } else {\\n            revert Surpay__SurveyNotFound();\\n        }\\n        \\n    }\\n    \\n    function getLastTimeStamp(string memory surveyId) public view returns(uint256){\\n        if (s_surveys[surveyId].numOfParticipantsDesired > 0){\\n            return s_surveys[surveyId].startTimeStamp;\\n        } else {\\n            revert Surpay__SurveyNotFound();\\n        }\\n    }\\n\\n    function getPayoutPerPersonBySurveyId(string memory surveyId) public view returns(uint256){\\n        if (s_surveys[surveyId].numOfParticipantsDesired > 0){\\n            return s_surveys[surveyId].totalPayoutAmount / s_surveys[surveyId].numOfParticipantsDesired;\\n        } else {\\n            revert Surpay__SurveyNotFound();\\n        }\\n    }\\n}\",\"keccak256\":\"0xdc415238e68ee939c25e921c3a491489ab6b4366c3c444f1180aa25fad3b0761\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200273f3803806200273f8339818101604052810190620000379190620000cf565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081608081815250508060a08181525050505062000116565b600080fd5b6000819050919050565b620000a98162000094565b8114620000b557600080fd5b50565b600081519050620000c9816200009e565b92915050565b60008060408385031215620000e957620000e86200008f565b5b6000620000f985828601620000b8565b92505060206200010c85828601620000b8565b9150509250929050565b60805160a0516125f56200014a600039600061079c01526000818161084e015281816108b20152610b5a01526125f56000f3fe6080604052600436106100fe5760003560e01c8063ac9d6a2b11610095578063e1744d7211610064578063e1744d721461034f578063e46552c91461038c578063e74b36df146103b5578063eb9992c3146103f2578063ed327e0914610409576100fe565b8063ac9d6a2b146102a2578063b374ff29146102be578063bab26fd2146102fb578063c3b9a2c814610326576100fe565b80636e04ff0d116100d15780636e04ff0d146101d1578063893d20e81461020f57806391ad27b41461023a5780639759ac3614610265576100fe565b806301b43c3e14610103578063129983011461012e5780634585e33b1461016b578063653cba7d14610194575b600080fd5b34801561010f57600080fd5b50610118610432565b604051610125919061197a565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611b1b565b61043c565b6040516101629190611bb8565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611c33565b610504565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190611c80565b6106bf565b6040516101c8919061197a565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f39190611d6a565b61074a565b604051610206929190611e4d565b60405180910390f35b34801561021b57600080fd5b5061022461076f565b6040516102319190611bb8565b60405180910390f35b34801561024657600080fd5b5061024f610798565b60405161025c919061197a565b60405180910390f35b34801561027157600080fd5b5061028c60048036038101906102879190611c80565b6107c0565b604051610299919061197a565b60405180910390f35b6102bc60048036038101906102b79190611e7d565b61084b565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190611c80565b610abe565b6040516102f29190611f93565b60405180910390f35b34801561030757600080fd5b50610310610b56565b60405161031d919061197a565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190611fae565b610b7e565b005b34801561035b57600080fd5b5061037660048036038101906103719190611c80565b610f69565b6040516103839190612030565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae9190611fae565b61101c565b005b3480156103c157600080fd5b506103dc60048036038101906103d79190611c80565b6111f1565b6040516103e9919061197a565b60405180910390f35b3480156103fe57600080fd5b506104076112a8565b005b34801561041557600080fd5b50610430600480360381019061042b919061207e565b6114dc565b005b6000600354905090565b60008060018460405161044f9190612116565b90815260200160405180910390206003015411156104cc576001836040516104779190612116565b9081526020016040518091039020600501828154811061049a5761049961212d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506104fe565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600061051e6040518060200160405280600081525061074a565b50905080156106885760006002805480602002602001604051908101604052809291908181526020016000905b828210156105f757838290600052602060002001805461056a9061218b565b80601f01602080910402602001604051908101604052809291908181526020018280546105969061218b565b80156105e35780601f106105b8576101008083540402835291602001916105e3565b820191906000526020600020905b8154815290600101906020018083116105c657829003601f168201915b50505050508152602001906001019061054b565b50505050905060005b81518110156106815761061281610b7e565b8181815181106106255761062461212d565b5b602002602001015160405161063a9190612116565b60405180910390207fa7998895d8d2e7856091bd8a5895a54d831c4d6c8bd8a8611ec2c1f873872fef60405160405180910390a28080610679906121eb565b915050610600565b50506106ba565b6040517fe47d1a5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000806001836040516106d29190612116565b9081526020016040518091039020600301541115610713576001826040516106fa9190612116565b9081526020016040518091039020600601549050610745565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000606060006002805490501115610765576001915061076a565b600091505b915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806001836040516107d39190612116565b9081526020016040518091039020600301541115610814576001826040516107fb9190612116565b9081526020016040518091039020600201549050610846565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b817f00000000000000000000000000000000000000000000000000000000000000006108779190612233565b3410156108b0576040517fc09bb52500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600360008282546108e29190612233565b925050819055506108f16117ec565b83816000018190525033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281604001818152505081816060018181525050428160c001818152505060008160e00190600281111561096957610968611f1c565b5b9081600281111561097d5761097c611f1c565b5b81525050806001866040516109929190612116565b908152602001604051809103902060008201518160000190816109b59190612413565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190610a37929190611859565b5060c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610a6d57610a6c611f1c565b5b021790555090505084604051610a839190612116565b60405180910390207fcc65c6fb1d804ba1dc418f9e3659483d310357279f035d45b8ea484fd6fe4a2f60405160405180910390a25050505050565b600080600183604051610ad19190612116565b9081526020016040518091039020600301541115610b1f57600182604051610af99190612116565b908152602001604051809103902060070160009054906101000a900460ff169050610b51565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002805480602002602001604051908101604052809291908181526020016000905b82821015610c4e578382906000526020600020018054610bc19061218b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bed9061218b565b8015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b505050505081526020019060010190610ba2565b505050509050600280811115610c6757610c66611f1c565b5b6001828481518110610c7c57610c7b61212d565b5b6020026020010151604051610c919190612116565b908152602001604051809103902060070160009054906101000a900460ff166002811115610cc257610cc1611f1c565b5b03610cf9576040517f4fc98f3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001828481518110610d1057610d0f61212d565b5b6020026020010151604051610d259190612116565b9081526020016040518091039020600401546001838581518110610d4c57610d4b61212d565b5b6020026020010151604051610d619190612116565b908152602001604051809103902060020154610d7d9190612514565b905060005b6001838581518110610d9757610d9661212d565b5b6020026020010151604051610dac9190612116565b908152602001604051809103902060050180549050811015610eff5747821015610eec5760006001848681518110610de757610de661212d565b5b6020026020010151604051610dfc9190612116565b90815260200160405180910390206005018281548110610e1f57610e1e61212d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051610e6d90612576565b60006040518083038185875af1925050503d8060008114610eaa576040519150601f19603f3d011682016040523d82523d6000602084013e610eaf565b606091505b5050905080610eea576040517f09e6a19a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8080610ef7906121eb565b915050610d82565b5060026001838581518110610f1757610f1661212d565b5b6020026020010151604051610f2c9190612116565b908152602001604051809103902060070160006101000a81548160ff02191690836002811115610f5f57610f5e611f1c565b5b0217905550505050565b6060600182604051610f7b9190612116565b90815260200160405180910390206000018054610f979061218b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc39061218b565b80156110105780601f10610fe557610100808354040283529160200191611010565b820191906000526020600020905b815481529060010190602001808311610ff357829003601f168201915b50505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a1576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003548111156110dd576040517fc09bb52500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161112490612576565b60006040518083038185875af1925050503d8060008114611161576040519150601f19603f3d011682016040523d82523d6000602084013e611166565b606091505b5050905080156111bb578160036000828254611182919061258b565b92505081905550817f4a37b25aab49761ecf63117fe82b98d750917451133cf797507bc9fb5b96044a60405160405180910390a26111ed565b6040517f09e6a19a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000806001836040516112049190612116565b90815260200160405180910390206003015411156112715760018260405161122c9190612116565b90815260200160405180910390206003015460018360405161124e9190612116565b90815260200160405180910390206002015461126a9190612514565b90506112a3565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461132d576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002805480602002602001604051908101604052809291908181526020016000905b828210156113fd5783829060005260206000200180546113709061218b565b80601f016020809104026020016040519081016040528092919081815260200182805461139c9061218b565b80156113e95780601f106113be576101008083540402835291602001916113e9565b820191906000526020600020905b8154815290600101906020018083116113cc57829003601f168201915b505050505081526020019060010190611351565b50505050905060005b81518110156114d85760018282815181106114245761142361212d565b5b60200260200101516040516114399190612116565b90815260200160405180910390206000808201600061145891906118e3565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160006114a79190611923565b60068201600090556007820160006101000a81549060ff0219169055505080806114d0906121eb565b915050611406565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611561576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826040516115719190612116565b9081526020016040518091039020600401546001836040516115939190612116565b90815260200160405180910390206003015411156117b6576001826040516115bb9190612116565b9081526020016040518091039020600501819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260405161163d9190612116565b9081526020016040518091039020600401600081548092919061165f906121eb565b91905055506001826040516116749190612116565b9081526020016040518091039020600401546001836040516116969190612116565b9081526020016040518091039020600301540361176e57600180836040516116be9190612116565b908152602001604051809103902060070160006101000a81548160ff021916908360028111156116f1576116f0611f1c565b5b021790555060028290806001815401808255809150506001900390600052602060002001600090919091909150908161172a9190612413565b50816040516117399190612116565b60405180910390207fc9629617ac320e57fa622f79c211617de659a3b7cbdda927e47dea5e4c0ab4da60405160405180910390a25b8073ffffffffffffffffffffffffffffffffffffffff167f099cc064944e6569611b439843932fa853d46618d78ca5a8e3989bcc5614853d60405160405180910390a26117e8565b6040517f13c8108e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60405180610100016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081526020016000600281111561185357611852611f1c565b5b81525090565b8280548282559060005260206000209081019282156118d2579160200282015b828111156118d15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611879565b5b5090506118df9190611944565b5090565b5080546118ef9061218b565b6000825580601f106119015750611920565b601f01602090049060005260206000209081019061191f9190611944565b5b50565b50805460008255906000526020600020908101906119419190611944565b50565b5b8082111561195d576000816000905550600101611945565b5090565b6000819050919050565b61197481611961565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119fc826119b3565b810181811067ffffffffffffffff82111715611a1b57611a1a6119c4565b5b80604052505050565b6000611a2e611995565b9050611a3a82826119f3565b919050565b600067ffffffffffffffff821115611a5a57611a596119c4565b5b611a63826119b3565b9050602081019050919050565b82818337600083830152505050565b6000611a92611a8d84611a3f565b611a24565b905082815260208101848484011115611aae57611aad6119ae565b5b611ab9848285611a70565b509392505050565b600082601f830112611ad657611ad56119a9565b5b8135611ae6848260208601611a7f565b91505092915050565b611af881611961565b8114611b0357600080fd5b50565b600081359050611b1581611aef565b92915050565b60008060408385031215611b3257611b3161199f565b5b600083013567ffffffffffffffff811115611b5057611b4f6119a4565b5b611b5c85828601611ac1565b9250506020611b6d85828601611b06565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba282611b77565b9050919050565b611bb281611b97565b82525050565b6000602082019050611bcd6000830184611ba9565b92915050565b600080fd5b600080fd5b60008083601f840112611bf357611bf26119a9565b5b8235905067ffffffffffffffff811115611c1057611c0f611bd3565b5b602083019150836001820283011115611c2c57611c2b611bd8565b5b9250929050565b60008060208385031215611c4a57611c4961199f565b5b600083013567ffffffffffffffff811115611c6857611c676119a4565b5b611c7485828601611bdd565b92509250509250929050565b600060208284031215611c9657611c9561199f565b5b600082013567ffffffffffffffff811115611cb457611cb36119a4565b5b611cc084828501611ac1565b91505092915050565b600067ffffffffffffffff821115611ce457611ce36119c4565b5b611ced826119b3565b9050602081019050919050565b6000611d0d611d0884611cc9565b611a24565b905082815260208101848484011115611d2957611d286119ae565b5b611d34848285611a70565b509392505050565b600082601f830112611d5157611d506119a9565b5b8135611d61848260208601611cfa565b91505092915050565b600060208284031215611d8057611d7f61199f565b5b600082013567ffffffffffffffff811115611d9e57611d9d6119a4565b5b611daa84828501611d3c565b91505092915050565b60008115159050919050565b611dc881611db3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e08578082015181840152602081019050611ded565b60008484015250505050565b6000611e1f82611dce565b611e298185611dd9565b9350611e39818560208601611dea565b611e42816119b3565b840191505092915050565b6000604082019050611e626000830185611dbf565b8181036020830152611e748184611e14565b90509392505050565b60008060008060808587031215611e9757611e9661199f565b5b600085013567ffffffffffffffff811115611eb557611eb46119a4565b5b611ec187828801611ac1565b945050602085013567ffffffffffffffff811115611ee257611ee16119a4565b5b611eee87828801611ac1565b9350506040611eff87828801611b06565b9250506060611f1087828801611b06565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611f5c57611f5b611f1c565b5b50565b6000819050611f6d82611f4b565b919050565b6000611f7d82611f5f565b9050919050565b611f8d81611f72565b82525050565b6000602082019050611fa86000830184611f84565b92915050565b600060208284031215611fc457611fc361199f565b5b6000611fd284828501611b06565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061200282611fdb565b61200c8185611fe6565b935061201c818560208601611dea565b612025816119b3565b840191505092915050565b6000602082019050818103600083015261204a8184611ff7565b905092915050565b61205b81611b97565b811461206657600080fd5b50565b60008135905061207881612052565b92915050565b600080604083850312156120955761209461199f565b5b600083013567ffffffffffffffff8111156120b3576120b26119a4565b5b6120bf85828601611ac1565b92505060206120d085828601612069565b9150509250929050565b600081905092915050565b60006120f082611fdb565b6120fa81856120da565b935061210a818560208601611dea565b80840191505092915050565b600061212282846120e5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121a357607f821691505b6020821081036121b6576121b561215c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121f682611961565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612228576122276121bc565b5b600182019050919050565b600061223e82611961565b915061224983611961565b9250828201905080821115612261576122606121bc565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122c97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261228c565b6122d3868361228c565b95508019841693508086168417925050509392505050565b6000819050919050565b600061231061230b61230684611961565b6122eb565b611961565b9050919050565b6000819050919050565b61232a836122f5565b61233e61233682612317565b848454612299565b825550505050565b600090565b612353612346565b61235e818484612321565b505050565b5b818110156123825761237760008261234b565b600181019050612364565b5050565b601f8211156123c75761239881612267565b6123a18461227c565b810160208510156123b0578190505b6123c46123bc8561227c565b830182612363565b50505b505050565b600082821c905092915050565b60006123ea600019846008026123cc565b1980831691505092915050565b600061240383836123d9565b9150826002028217905092915050565b61241c82611fdb565b67ffffffffffffffff811115612435576124346119c4565b5b61243f825461218b565b61244a828285612386565b600060209050601f83116001811461247d576000841561246b578287015190505b61247585826123f7565b8655506124dd565b601f19841661248b86612267565b60005b828110156124b35784890151825560018201915060208501945060208101905061248e565b868310156124d057848901516124cc601f8916826123d9565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061251f82611961565b915061252a83611961565b92508261253a576125396124e5565b5b828204905092915050565b600081905092915050565b50565b6000612560600083612545565b915061256b82612550565b600082019050919050565b600061258182612553565b9150819050919050565b600061259682611961565b91506125a183611961565b92508282039050818111156125b9576125b86121bc565b5b9291505056fea2646970667358221220bd414c453bccec6dfb8b45c84d0def35eeb0fd15febdf30e27cc23c6a281fc0964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c8063ac9d6a2b11610095578063e1744d7211610064578063e1744d721461034f578063e46552c91461038c578063e74b36df146103b5578063eb9992c3146103f2578063ed327e0914610409576100fe565b8063ac9d6a2b146102a2578063b374ff29146102be578063bab26fd2146102fb578063c3b9a2c814610326576100fe565b80636e04ff0d116100d15780636e04ff0d146101d1578063893d20e81461020f57806391ad27b41461023a5780639759ac3614610265576100fe565b806301b43c3e14610103578063129983011461012e5780634585e33b1461016b578063653cba7d14610194575b600080fd5b34801561010f57600080fd5b50610118610432565b604051610125919061197a565b60405180910390f35b34801561013a57600080fd5b5061015560048036038101906101509190611b1b565b61043c565b6040516101629190611bb8565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d9190611c33565b610504565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190611c80565b6106bf565b6040516101c8919061197a565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f39190611d6a565b61074a565b604051610206929190611e4d565b60405180910390f35b34801561021b57600080fd5b5061022461076f565b6040516102319190611bb8565b60405180910390f35b34801561024657600080fd5b5061024f610798565b60405161025c919061197a565b60405180910390f35b34801561027157600080fd5b5061028c60048036038101906102879190611c80565b6107c0565b604051610299919061197a565b60405180910390f35b6102bc60048036038101906102b79190611e7d565b61084b565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190611c80565b610abe565b6040516102f29190611f93565b60405180910390f35b34801561030757600080fd5b50610310610b56565b60405161031d919061197a565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190611fae565b610b7e565b005b34801561035b57600080fd5b5061037660048036038101906103719190611c80565b610f69565b6040516103839190612030565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae9190611fae565b61101c565b005b3480156103c157600080fd5b506103dc60048036038101906103d79190611c80565b6111f1565b6040516103e9919061197a565b60405180910390f35b3480156103fe57600080fd5b506104076112a8565b005b34801561041557600080fd5b50610430600480360381019061042b919061207e565b6114dc565b005b6000600354905090565b60008060018460405161044f9190612116565b90815260200160405180910390206003015411156104cc576001836040516104779190612116565b9081526020016040518091039020600501828154811061049a5761049961212d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506104fe565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b600061051e6040518060200160405280600081525061074a565b50905080156106885760006002805480602002602001604051908101604052809291908181526020016000905b828210156105f757838290600052602060002001805461056a9061218b565b80601f01602080910402602001604051908101604052809291908181526020018280546105969061218b565b80156105e35780601f106105b8576101008083540402835291602001916105e3565b820191906000526020600020905b8154815290600101906020018083116105c657829003601f168201915b50505050508152602001906001019061054b565b50505050905060005b81518110156106815761061281610b7e565b8181815181106106255761062461212d565b5b602002602001015160405161063a9190612116565b60405180910390207fa7998895d8d2e7856091bd8a5895a54d831c4d6c8bd8a8611ec2c1f873872fef60405160405180910390a28080610679906121eb565b915050610600565b50506106ba565b6040517fe47d1a5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000806001836040516106d29190612116565b9081526020016040518091039020600301541115610713576001826040516106fa9190612116565b9081526020016040518091039020600601549050610745565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6000606060006002805490501115610765576001915061076a565b600091505b915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806001836040516107d39190612116565b9081526020016040518091039020600301541115610814576001826040516107fb9190612116565b9081526020016040518091039020600201549050610846565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b817f00000000000000000000000000000000000000000000000000000000000000006108779190612233565b3410156108b0576040517fc09bb52500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600360008282546108e29190612233565b925050819055506108f16117ec565b83816000018190525033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281604001818152505081816060018181525050428160c001818152505060008160e00190600281111561096957610968611f1c565b5b9081600281111561097d5761097c611f1c565b5b81525050806001866040516109929190612116565b908152602001604051809103902060008201518160000190816109b59190612413565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190610a37929190611859565b5060c0820151816006015560e08201518160070160006101000a81548160ff02191690836002811115610a6d57610a6c611f1c565b5b021790555090505084604051610a839190612116565b60405180910390207fcc65c6fb1d804ba1dc418f9e3659483d310357279f035d45b8ea484fd6fe4a2f60405160405180910390a25050505050565b600080600183604051610ad19190612116565b9081526020016040518091039020600301541115610b1f57600182604051610af99190612116565b908152602001604051809103902060070160009054906101000a900460ff169050610b51565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002805480602002602001604051908101604052809291908181526020016000905b82821015610c4e578382906000526020600020018054610bc19061218b565b80601f0160208091040260200160405190810160405280929190818152602001828054610bed9061218b565b8015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b505050505081526020019060010190610ba2565b505050509050600280811115610c6757610c66611f1c565b5b6001828481518110610c7c57610c7b61212d565b5b6020026020010151604051610c919190612116565b908152602001604051809103902060070160009054906101000a900460ff166002811115610cc257610cc1611f1c565b5b03610cf9576040517f4fc98f3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001828481518110610d1057610d0f61212d565b5b6020026020010151604051610d259190612116565b9081526020016040518091039020600401546001838581518110610d4c57610d4b61212d565b5b6020026020010151604051610d619190612116565b908152602001604051809103902060020154610d7d9190612514565b905060005b6001838581518110610d9757610d9661212d565b5b6020026020010151604051610dac9190612116565b908152602001604051809103902060050180549050811015610eff5747821015610eec5760006001848681518110610de757610de661212d565b5b6020026020010151604051610dfc9190612116565b90815260200160405180910390206005018281548110610e1f57610e1e61212d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051610e6d90612576565b60006040518083038185875af1925050503d8060008114610eaa576040519150601f19603f3d011682016040523d82523d6000602084013e610eaf565b606091505b5050905080610eea576040517f09e6a19a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b8080610ef7906121eb565b915050610d82565b5060026001838581518110610f1757610f1661212d565b5b6020026020010151604051610f2c9190612116565b908152602001604051809103902060070160006101000a81548160ff02191690836002811115610f5f57610f5e611f1c565b5b0217905550505050565b6060600182604051610f7b9190612116565b90815260200160405180910390206000018054610f979061218b565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc39061218b565b80156110105780601f10610fe557610100808354040283529160200191611010565b820191906000526020600020905b815481529060010190602001808311610ff357829003601f168201915b50505050509050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a1576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003548111156110dd576040517fc09bb52500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161112490612576565b60006040518083038185875af1925050503d8060008114611161576040519150601f19603f3d011682016040523d82523d6000602084013e611166565b606091505b5050905080156111bb578160036000828254611182919061258b565b92505081905550817f4a37b25aab49761ecf63117fe82b98d750917451133cf797507bc9fb5b96044a60405160405180910390a26111ed565b6040517f09e6a19a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000806001836040516112049190612116565b90815260200160405180910390206003015411156112715760018260405161122c9190612116565b90815260200160405180910390206003015460018360405161124e9190612116565b90815260200160405180910390206002015461126a9190612514565b90506112a3565b6040517fb01e933700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461132d576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002805480602002602001604051908101604052809291908181526020016000905b828210156113fd5783829060005260206000200180546113709061218b565b80601f016020809104026020016040519081016040528092919081815260200182805461139c9061218b565b80156113e95780601f106113be576101008083540402835291602001916113e9565b820191906000526020600020905b8154815290600101906020018083116113cc57829003601f168201915b505050505081526020019060010190611351565b50505050905060005b81518110156114d85760018282815181106114245761142361212d565b5b60200260200101516040516114399190612116565b90815260200160405180910390206000808201600061145891906118e3565b6001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905560048201600090556005820160006114a79190611923565b60068201600090556007820160006101000a81549060ff0219169055505080806114d0906121eb565b915050611406565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611561576040517fba34867000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001826040516115719190612116565b9081526020016040518091039020600401546001836040516115939190612116565b90815260200160405180910390206003015411156117b6576001826040516115bb9190612116565b9081526020016040518091039020600501819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018260405161163d9190612116565b9081526020016040518091039020600401600081548092919061165f906121eb565b91905055506001826040516116749190612116565b9081526020016040518091039020600401546001836040516116969190612116565b9081526020016040518091039020600301540361176e57600180836040516116be9190612116565b908152602001604051809103902060070160006101000a81548160ff021916908360028111156116f1576116f0611f1c565b5b021790555060028290806001815401808255809150506001900390600052602060002001600090919091909150908161172a9190612413565b50816040516117399190612116565b60405180910390207fc9629617ac320e57fa622f79c211617de659a3b7cbdda927e47dea5e4c0ab4da60405160405180910390a25b8073ffffffffffffffffffffffffffffffffffffffff167f099cc064944e6569611b439843932fa853d46618d78ca5a8e3989bcc5614853d60405160405180910390a26117e8565b6040517f13c8108e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60405180610100016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160608152602001600081526020016000600281111561185357611852611f1c565b5b81525090565b8280548282559060005260206000209081019282156118d2579160200282015b828111156118d15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611879565b5b5090506118df9190611944565b5090565b5080546118ef9061218b565b6000825580601f106119015750611920565b601f01602090049060005260206000209081019061191f9190611944565b5b50565b50805460008255906000526020600020908101906119419190611944565b50565b5b8082111561195d576000816000905550600101611945565b5090565b6000819050919050565b61197481611961565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119fc826119b3565b810181811067ffffffffffffffff82111715611a1b57611a1a6119c4565b5b80604052505050565b6000611a2e611995565b9050611a3a82826119f3565b919050565b600067ffffffffffffffff821115611a5a57611a596119c4565b5b611a63826119b3565b9050602081019050919050565b82818337600083830152505050565b6000611a92611a8d84611a3f565b611a24565b905082815260208101848484011115611aae57611aad6119ae565b5b611ab9848285611a70565b509392505050565b600082601f830112611ad657611ad56119a9565b5b8135611ae6848260208601611a7f565b91505092915050565b611af881611961565b8114611b0357600080fd5b50565b600081359050611b1581611aef565b92915050565b60008060408385031215611b3257611b3161199f565b5b600083013567ffffffffffffffff811115611b5057611b4f6119a4565b5b611b5c85828601611ac1565b9250506020611b6d85828601611b06565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba282611b77565b9050919050565b611bb281611b97565b82525050565b6000602082019050611bcd6000830184611ba9565b92915050565b600080fd5b600080fd5b60008083601f840112611bf357611bf26119a9565b5b8235905067ffffffffffffffff811115611c1057611c0f611bd3565b5b602083019150836001820283011115611c2c57611c2b611bd8565b5b9250929050565b60008060208385031215611c4a57611c4961199f565b5b600083013567ffffffffffffffff811115611c6857611c676119a4565b5b611c7485828601611bdd565b92509250509250929050565b600060208284031215611c9657611c9561199f565b5b600082013567ffffffffffffffff811115611cb457611cb36119a4565b5b611cc084828501611ac1565b91505092915050565b600067ffffffffffffffff821115611ce457611ce36119c4565b5b611ced826119b3565b9050602081019050919050565b6000611d0d611d0884611cc9565b611a24565b905082815260208101848484011115611d2957611d286119ae565b5b611d34848285611a70565b509392505050565b600082601f830112611d5157611d506119a9565b5b8135611d61848260208601611cfa565b91505092915050565b600060208284031215611d8057611d7f61199f565b5b600082013567ffffffffffffffff811115611d9e57611d9d6119a4565b5b611daa84828501611d3c565b91505092915050565b60008115159050919050565b611dc881611db3565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e08578082015181840152602081019050611ded565b60008484015250505050565b6000611e1f82611dce565b611e298185611dd9565b9350611e39818560208601611dea565b611e42816119b3565b840191505092915050565b6000604082019050611e626000830185611dbf565b8181036020830152611e748184611e14565b90509392505050565b60008060008060808587031215611e9757611e9661199f565b5b600085013567ffffffffffffffff811115611eb557611eb46119a4565b5b611ec187828801611ac1565b945050602085013567ffffffffffffffff811115611ee257611ee16119a4565b5b611eee87828801611ac1565b9350506040611eff87828801611b06565b9250506060611f1087828801611b06565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611f5c57611f5b611f1c565b5b50565b6000819050611f6d82611f4b565b919050565b6000611f7d82611f5f565b9050919050565b611f8d81611f72565b82525050565b6000602082019050611fa86000830184611f84565b92915050565b600060208284031215611fc457611fc361199f565b5b6000611fd284828501611b06565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061200282611fdb565b61200c8185611fe6565b935061201c818560208601611dea565b612025816119b3565b840191505092915050565b6000602082019050818103600083015261204a8184611ff7565b905092915050565b61205b81611b97565b811461206657600080fd5b50565b60008135905061207881612052565b92915050565b600080604083850312156120955761209461199f565b5b600083013567ffffffffffffffff8111156120b3576120b26119a4565b5b6120bf85828601611ac1565b92505060206120d085828601612069565b9150509250929050565b600081905092915050565b60006120f082611fdb565b6120fa81856120da565b935061210a818560208601611dea565b80840191505092915050565b600061212282846120e5565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121a357607f821691505b6020821081036121b6576121b561215c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121f682611961565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612228576122276121bc565b5b600182019050919050565b600061223e82611961565b915061224983611961565b9250828201905080821115612261576122606121bc565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026122c97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261228c565b6122d3868361228c565b95508019841693508086168417925050509392505050565b6000819050919050565b600061231061230b61230684611961565b6122eb565b611961565b9050919050565b6000819050919050565b61232a836122f5565b61233e61233682612317565b848454612299565b825550505050565b600090565b612353612346565b61235e818484612321565b505050565b5b818110156123825761237760008261234b565b600181019050612364565b5050565b601f8211156123c75761239881612267565b6123a18461227c565b810160208510156123b0578190505b6123c46123bc8561227c565b830182612363565b50505b505050565b600082821c905092915050565b60006123ea600019846008026123cc565b1980831691505092915050565b600061240383836123d9565b9150826002028217905092915050565b61241c82611fdb565b67ffffffffffffffff811115612435576124346119c4565b5b61243f825461218b565b61244a828285612386565b600060209050601f83116001811461247d576000841561246b578287015190505b61247585826123f7565b8655506124dd565b601f19841661248b86612267565b60005b828110156124b35784890151825560018201915060208501945060208101905061248e565b868310156124d057848901516124cc601f8916826123d9565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061251f82611961565b915061252a83611961565b92508261253a576125396124e5565b5b828204905092915050565b600081905092915050565b50565b6000612560600083612545565b915061256b82612550565b600082019050919050565b600061258182612553565b9150819050919050565b600061259682611961565b91506125a183611961565b92508282039050818111156125b9576125b86121bc565b5b9291505056fea2646970667358221220bd414c453bccec6dfb8b45c84d0def35eeb0fd15febdf30e27cc23c6a281fc0964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Returns true only if there are any complete surveys."
      },
      "createSurvey(string,string,uint256,uint256)": {
        "details": "A survey can be created by anyone, but it must be calledwith both the total payout amount and the survey creationfee. The current fee is 0.01 ETH. "
      },
      "distributeFundsFromCompletedSurvey(uint256)": {
        "details": "The index of s_completeSurveys is passed in from performUpkeep()."
      },
      "performUpkeep(bytes)": {
        "details": "chainlink automation. perform upkeep fires if checkUpkeep returnstrue."
      },
      "sendUserSurveyData(string,address)": {
        "details": "The SurveyCompleted event is the event listener"
      },
      "withdrawFromFeeHolder(uint256)": {
        "details": "allows owner to withdraw no more than the survey creation fees."
      }
    },
    "stateVariables": {
      "i_owner": {
        "details": "s_surveys holds all survey data, with the surveyId as the key. completed surveys stors the surveyIds for all completed surveysThe surveyCreationFee is required for all new surveys.The surveyCreationFee is for tx fees and revenue for the service"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "removeCompletedSurveys()": {
        "notice": "Allows the owner to perform a clean up of any completed surveys"
      },
      "sendUserSurveyData(string,address)": {
        "notice": "Function can only be called by the contract owner.This was neccissary to ensure that the user data wasa valid response to the survey. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/Surpay.sol:Surpay",
        "label": "i_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 70,
        "contract": "contracts/Surpay.sol:Surpay",
        "label": "s_surveys",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Survey)58_storage)"
      },
      {
        "astId": 73,
        "contract": "contracts/Surpay.sol:Surpay",
        "label": "s_completedSurveys",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 77,
        "contract": "contracts/Surpay.sol:Surpay",
        "label": "s_feeHolder",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_enum(SurveyState)62": {
        "encoding": "inplace",
        "label": "enum Surpay.SurveyState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Survey)58_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Surpay.Survey)",
        "numberOfBytes": "32",
        "value": "t_struct(Survey)58_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Survey)58_storage": {
        "encoding": "inplace",
        "label": "struct Surpay.Survey",
        "members": [
          {
            "astId": 41,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "companyId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "companyAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 45,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "totalPayoutAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 47,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "numOfParticipantsDesired",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 49,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "numOfParticipantsFulfilled",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 52,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "surveyTakers",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address_payable)dyn_storage"
          },
          {
            "astId": 54,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "startTimeStamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 57,
            "contract": "contracts/Surpay.sol:Surpay",
            "label": "surveyState",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(SurveyState)62"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}